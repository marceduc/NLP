word = str_sub(str1,idx+1,nchar(str1))
word
}
get_tag = function(pair){
idx = tail(str_locate_all(str1, "[/]")[[1]],1)[1]
tag = str_sub(str1,idx+1,nchar(str1))
tag
}
get_tag(str1)
get_word(str1)
get_word = function(pair){
idx = tail(str_locate_all(str1, "[/]")[[1]],1)[1]
word = str_sub(str1,1,idx-1)
word
}
get_word(str1)
files = list.files(training_path)
sentences = vector();
idx = 1
for(file in files){
content = readLines(paste0(training_path, file))
print(file)
for(i in 1:length(content)){
s = content[i]
if(nchar(trimws(s))>3){
sentences[idx] = trimws(s);
idx = idx +1
print(idx)
}
}
}
sentences = unlist(lapply(sentences, function(x) str_split(x, " ") ))
sentences[[1]]
sentences[1]
sentences = vector();
idx = 1
for(file in files){
content = readLines(paste0(training_path, file))
print(file)
for(i in 1:length(content)){
s = content[i]
if(nchar(trimws(s))>3){
sentences[idx] = trimws(s);
idx = idx +1
print(idx)
}
}
}
sentences[1]
sentences = lapply(sentences, function(x) str_split(x, " ") )
sentences[1]
sentences[[1]]
sentences[[1]][1]
sentences[[1]][[1]]
sentences[[1]][[1]][1]
files = c("ca01","ca02","ca03")
sentences = vector();
idx = 1
for(file in files){
content = readLines(paste0(training_path, file))
print(file)
for(i in 1:length(content)){
s = content[i]
if(nchar(trimws(s))>3){
sentences[idx] = trimws(s);
idx = idx +1
print(idx)
}
}
}
sentences = lapply(sentences, function(x) str_split(x, " ") )
sapply(sentences, function(x) x[[1]][[1]][1])
sapply(sentences, function(x) get_tag(x[[1]][[1]][1]))
get_tag = function(pair){
idx = tail(str_locate_all(pair, "[/]")[[1]],1)[1]
tag = str_sub(str1,idx+1,nchar(str1))
tag
}
get_word = function(pair){
idx = tail(str_locate_all(pair, "[/]")[[1]],1)[1]
word = str_sub(str1,1,idx-1)
word
}
sapply(sentences, function(x) get_tag(x[[1]][[1]][1]))
get_tag = function(pair){
idx = tail(str_locate_all(pair, "[/]")[[1]],1)[1]
tag = str_sub(pair,idx+1,nchar(str1))
tag
}
get_word = function(pair){
idx = tail(str_locate_all(pair, "[/]")[[1]],1)[1]
word = str_sub(pair,1,idx-1)
word
}
sapply(sentences, function(x) get_tag(x[[1]][[1]][1]))
start_tags = sapply(sentences, function(x) get_tag(x[[1]][[1]][1]))
table(start_tags)
data.frame(table(start_tags))
start_tags = data.frame(table(start_tags))
View(start_tags)
unlist(sentences)
tag = sapply(unlist(sentences), get_tag)
tag
type(tag)
class(tag)
tag[1]
words = sapply(unlist(sentences), get_words)
words = sapply(unlist(sentences), get_word)
emission = cbind(tags, words)
tags = sapply(unlist(sentences), get_tag)
rm(tag)
emission = cbind(tags, words)
View(emission)
View(data.frame(emission))
View(table(data.frame(emission)))
View(emission)
View(table(data.frame(emission)))
tags[1:200]
unique(tags)
length(unique(tags))
length(unique(words))
View(table(tags, words))
emission = data.frame(table(tags, words))
View(emission)
sentences[[1]]
sapply(sentences[[1]][[1]], get_tag)
preceder = sapply(sentences[[1]][[1]], get_tag)
preceder = preceder[1:length(preceder)-1]
preceder
follower = preceder[2:length(preceder)]
follower
preceder = sapply(sentences[[1]][[1]], get_tag)
follower = preceder[2:length(preceder)]
preceder = preceder[1:length(preceder)-1]
preceder
follower
cbind(preceder, follower)
get_preceder_follower = function(sentence){
preceder = sapply(sentence[[1]], get_tag)
follower = preceder[2:length(preceder)]
preceder = preceder[1:length(preceder)-1]
preceder
follower
return(cbind(preceder, follower))
}
l = lapply(sentences, get_preceder_follower)
l[[1]]
transition = do.call(rbind, l)
get_preceder_follower = function(sentence){
preceder = sapply(sentence[[1]], get_tag)
follower = preceder[2:length(preceder)]
preceder = preceder[1:length(preceder)-1]
preceder
follower
relation = data.frame(cbind(preceder, follower))
return(relation)
}
l = lapply(sentences, get_preceder_follower)
preceder = sapply(sentence[[1]][[1]], get_tag)
preceder = sapply(sentences[[1]][[1]], get_tag)
follower = preceder[2:length(preceder)]
preceder = preceder[1:length(preceder)-1]
preceder
follower
relation = data.frame(cbind(preceder, follower))
relation
preceder
sentences[[1]][[1]]
get_tag(sentences[[1]][[1]])
get_tag("./.")
sapply(sentences[[1]], get_tag)
sentence
str1 = "1234/678/10"
get_tag(str1)
get_word(str1)
get_tag("Fulton/np")
sentence
sentence = sentences[1]
sentence
sentence[[1]]
sentence[[1]][[1]]
get_preceder_follower = function(sentence){
preceder = sapply(sentence[[1]][[1]], get_tag)
follower = preceder[2:length(preceder)]
preceder = preceder[1:length(preceder)-1]
preceder
follower
relation = data.frame(cbind(preceder, follower))
return(relation)
}
l = lapply(sentences, get_preceder_follower)
preceder = sapply(sentence[[1]][[1]], get_tag)
follower = preceder[2:length(preceder)]
preceder = preceder[1:length(preceder)-1]
preceder
relation = data.frame(cbind(preceder, follower))
relation
preceder = sapply(sentence[[1]][[1]], get_tag)
preceder
get_tag("investigation/nn")
str1 = "investigation/nn"
get_tag(str1)
get_tag("investigation/nn")
preceder = sapply(sentence[[1]][[1]], get_tag)
preceder
follower = preceder[2:length(preceder)]
preceder = preceder[1:length(preceder)-1]
relation = data.frame(cbind(preceder, follower))
relation
get_preceder_follower = function(sentence){
preceder = sapply(sentence[[1]][[1]], get_tag)
follower = preceder[2:length(preceder)]
preceder = preceder[1:length(preceder)-1]
relation = data.frame(cbind(preceder, follower))
return(relation)
}
l = lapply(sentences, get_preceder_follower)
get_preceder_follower(sentence)
get_preceder_follower = function(sentence){
preceder = sapply(sentence[[1]][[1]], get_tag)
follower = preceder[2:length(preceder)]
preceder = preceder[1:length(preceder)-1]
relation = cbind(preceder, follower)
return(relation)
}
get_preceder_follower(sentence)
l = lapply(sentences, get_preceder_follower)
transition = do.call(rbind, l)
View(transition)
get_preceder_follower = function(sentence){
preceder = sapply(sentence[[1]][[1]], get_tag)
follower = preceder[2:length(preceder)]
preceder = preceder[1:length(preceder)-1]
relation = data.frame(preceder, follower)
return(relation)
}
get_preceder_follower(sentence)
l = lapply(sentences, get_preceder_follower)
sentence = sentences[2]
get_preceder_follower(sentence)
sentence = sentences[3]
get_preceder_follower(sentence)
l = list()
l = list()
for(i in 1:length(sentences)){
l[i] = get_preceder_follower(sentences[[i]])
}
i
get_preceder_follower(sentences[[i]])
sentences[[i]]
for(i in 1:length(sentences)){
l[i] = get_preceder_follower(sentences[i])
}
i
str(sentences)
warnings()
l[1]
preceder
data.frame(preceder, follower)
sentences[82]
sentences[81]
sentences[83]
preceder = sapply(sentence[[82]][[1]], get_tag)
preceder
preceder = sapply(sentence[[1]][[82]], get_tag)
get_tag
sapply(sentences[82], get_tag)
l[[1]]
get_preceder_follower = function(sentence){
preceder = sapply(sentence[[1]][[1]], get_tag)
follower = preceder[2:length(preceder)]
preceder = preceder[1:length(preceder)-1]
relation = data.frame(preceder, follower)
return(relation)
}
get_preceder_follower(sentences[1])
sentences[82]
sentences[82][[1]][[1]]
sentences[2][[1]][[1]]
length(sentences[2][[1]][[1]])
l = list()
for(i in 1:length(sentences)){
if(length(sentences[i]<2)){
next
}
l[[i]] = get_preceder_follower(sentences[i])
}
l[[1]]
l
l = list()
l = list()
for(i in 1:length(sentences)){
if(length(sentences[i][[1]][[1]]<2)){
next
}
l[[i]] = get_preceder_follower(sentences[i])
}
l
l = list()
for(i in 1:length(sentences)){
if(length(sentences[i][[1]][[1]])<2){
next
}
l[[i]] = get_preceder_follower(sentences[i])
}
l
l[1]
transition = do.call(rbind, l)
View(transition)
transition = table(transition)
View(emission)
transition = as.data.frame(transition)
View(transition)
total_preceder = ave(transition$Freq, preceder, sum)
total_preceder = ave(transition$Freq, preceder)
transition$total_preceder = ave(transition$Freq, preceder)
?ave
uniqeu(transition$preceder)
unique(transition$preceder)
unique(transition$follower)
transition$total_preceder = ave(transition$Freq, transition$preceder)
transition$total_preceder = ave(transition$Freq, transition$preceder)
transition$total_preceder = ave(transition$Freq, transition$preceder, sum)
transition$total_preceder = ave(transition$Freq, transition$preceder, FUN = sum)
files = list.files(training_path)
sentences = vector();
idx = 1
for(file in files){
content = readLines(paste0(training_path, file))
print(file)
for(i in 1:length(content)){
s = content[i]
if(nchar(trimws(s))>3){
sentences[idx] = trimws(s);
idx = idx +1
print(idx)
}
}
}
start_tags = sapply(sentences, function(x) get_tag(x[[1]][[1]][1]))
start_tags = data.frame(table(start_tags))
View(start_tags)
sentences[1]
sentences[1][[1]][[1]][1]
sentences[1]
sentences[[1]]
sentences[1]
sentences = vector();
idx = 1
for(file in files){
content = readLines(paste0(training_path, file))
print(file)
for(i in 1:length(content)){
s = content[i]
if(nchar(trimws(s))>3){
sentences[idx] = trimws(s);
idx = idx +1
print(idx)
}
}
}
sentences = lapply(sentences, function(x) str_split(x, " ") )
sentences[[1]][[1]][1]
start_tags = sapply(sentences, function(x) get_tag(x[[1]][[1]][1]))
start_tags = data.frame(table(start_tags))
View(start_tags)
start_tags$p = start_tags$Freq / sum(start_tags$Freq)
start_tags$log_p = log(start_tags$p)
tags = sapply(unlist(sentences), get_tag)
words = sapply(unlist(sentences), get_word)
emission = data.frame(table(tags, words))
View(emission)
tag_counts = ave(emission$Freq, emission$tags, FUN = sum)
emission$p = emission$Freq / tag_counts
emission$log_p = log(emission$p)
get_preceder_follower(sentences[1])
l = list()
for(i in 1:length(sentences)){
if(length(sentences[i][[1]][[1]])<2){
next
}
l[[i]] = get_preceder_follower(sentences[i])
}
transition = do.call(rbind, l)
transition = table(transition)
transition = as.data.frame(transition)
transition$total_preceder = ave(transition$Freq, transition$preceder, FUN = sum)
head(transition)
getwd()
transition.size()
transition.info()
object.size(transition)
transition$p = transition$Freq/ transition$total_preceder
write.csv(x =transition, "../../transition.csv")
write.csv(x =emission, "../../emission")
write.csv(x= start_tags, "../../start_p.csv")
sentences[1]
sentence = unlist(sentences[1])
sentence
sentence = sentences[1]
sentence = unlist(sentence)
sentence
states = lapply(sentence,get_tags )
states = lapply(sentence,get_tag )
states
true_states = sapply(sentence,get_tag )
data.frame(row.names = 1:length(true_states))
?data.frame
start_p = start_tags
data.frame(matrix(ncol = length(unique(start_p$start_tags)), nrow = length(sentence)))
MLL = data.frame(matrix(ncol = length(unique(start_p$start_tags)), nrow = length(sentence)))
MLL = data.frame(matrix(ncol = length(sentence), nrow = length(unique(start_p$start_tags))))
colnames((MLL))
rownames((MLL))
rownames((MLL)) = unique(start_p$start_tags)
rownames(MLL) = unique(start_p$start_tags)
View(MLL)
colnames(MLL) = 1:length(sentence)
MLL = data.frame(matrix(nrow = length(sentence), ncol = length(unique(start_p$start_tags))))
colnames(MLL) = unique(start_p$start_tags)
View(MLL)
true_words = sapply(sentence,get_word )
for(state in colnames(MLL)){
MLL[1,state] = start_p$log_p[start_p$start_tags == state] + emission$log_p[emission$tags ==state & emission$words == true_words[1]]
}
unique(emission$tags)
unique(emission$tags)[1]
unique(emission$tags)[1] == ""
unique(emission$tags)[1] == colnames(MLL)[1]
for(state in colnames(MLL)){
MLL[1,state] = start_p$log_p[start_p$start_tags == state]
#emission$log_p[emission$tags ==state & emission$words == true_words[1]]
}
MLL[1,""]
MLL[1,"wps"]
MLL[1,""]
MLL[1,1]
MLL[1," "]
colnames(MLL) [1]
colnames(MLL) [1] = "NONE"
View(MLL)
start_p$start_tags[start_p$start_tags == '']
start_p$start_tags[start_p$start_tags == ""]
start_p$start_tags[start_p$start_tags == ""] == "NONE"
start_p$start_tags[start_p$start_tags == ""] = "NONE"
View(start_tags)
start_p$start_tags = as.character(start_p$start_tags)
start_p$start_tags[start_p$start_tags == ""] = "NONE"
start_p$start_tags[1] = "NONE"
start_p$start_tags[1]
View(start_p)
start_p = start_tags
start_p$start_tags[1] = "NONE"
start_p = start_tags
start_p$start_tags = as.character(start_p$start_tags)
start_p$start_tags[start_p$start_tags == ""] = "NONE"
start_p$start_tags = as.factor(start_p$start_tags)
emission$tags = as.character(emission$tags)
emission$tags[emission$tags==""] = "NONE"
emission$tags = as.factor(emission$tags)
transition$preceder = as.character(transition$preceder )
transition$follower = as.character(transition$follower)
transition$preceder[transition$preceder==""] = "NONE"
transition$follower[transition$follower==""] = "NONE"
transition$preceder = as.factor(transition$preceder )
transition$follower = as.factor(transition$follower)
for(state in colnames(MLL)){
MLL[1,state] = start_p$log_p[start_p$start_tags == state]
#emission$log_p[emission$tags ==state & emission$words == true_words[1]]
}
View(MLL)
true_words[2]
MLL[1]
MLL[,1]
MLL[1,]
transition$preceder
transition$p
View(transition)
state
transition$log_p = log(transition$p)
tr_p = transition$log_p[transition$follower == state]
tr_p
preceder = transition$preceder[transition$follower == state]
preceder
preceder
MLL[1,]
order(start_p$start_tags)
order(as.character(start_p$start_tags))
start_p[order(as.character(start_p$start_tags))]
start_p[order(as.character(start_p$start_tags)),]
start_p = start_p[order(as.character(start_p$start_tags)),]
transition = transition[order(as.character(transition$preceder)),]
emission = emission[order(as.character(emission$s))]
MLL[1,]
sada
MLL = data.frame(matrix(ncol = length(sentence), nrow = length(unique(start_p$start_tags))))
MLL = data.frame(matrix(nrow = length(sentence), ncol = length(unique(start_p$start_tags))))
colnames(MLL) = unique(start_p$start_tags)
View(MLL)
for(state in colnames(MLL)){
MLL[1,state] = start_p$log_p[start_p$start_tags == state]
#emission$log_p[emission$tags ==state & emission$words == true_words[1]]
}
tr_p = transition$log_p[transition$follower == state]
tr_p
preceder = transition$preceder[transition$follower == state]
preceder
MLL[1,]
length(MLL[1,])
unique(emission$tags)
emission = read.csv("../../emission.csv")
emission = emission[order(as.character(emission$tags))]
