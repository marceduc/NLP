wd = "/Users/deepthought42/Dropbox/Studium/NLP/Maschinelle Sprachverarbeitung/3_POS-Tagging"
emission = read.csv("../../emission.csv")
setwd(wd)
emission = read.csv("../../emission.csv")
transition = read.csv("../../transition.csv")
start_p = read.csv("../../transition.csv")
View(start_p)
start_p = start_p[order(as.character(start_p$start_tags)),]
start_p = read.csv("../../transition.csv")
View(start_p)
start_p = read.csv("../../start_p.csv")
View(start_p)
emission = read.csv("../../emission.csv", row.names = F)
transition = read.csv("../../transition.csv", row.names = F)
start_p = read.csv("../../start_p.csv", row.names = F)
?read.csv()
emission = read.csv("../../emission.csv")
transition = read.csv("../../transition.csv")
start_p = read.csv("../../start_p.csv")
View(emission)
View(start_p)
View(transition)
View(start_p)
View(emission)
start_p[,-1]
start_p = start_p[,-1]
emission = emission[,-1]
transition = emission[,-1]
View(transition)
View(emission)
transition = read.csv("../../transition.csv")
View(transition)
transition = transition[,-1]
start_p = start_p[order(as.character(start_p$start_tags)),]
transition = transition[order(as.character(transition$preceder)),]
emission = emission[order(as.character(emission$tags))]
View(emission)
emission = emission[order(as.character(emission$tags)),]
start_p$start_tags = as.character(start_p$start_tags)
start_p$start_tags[start_p$start_tags == ""] = "NONE"
start_p$start_tags = as.factor(start_p$start_tags)
emission$tags = as.character(emission$tags)
emission$tags[emission$tags==""] = "NONE"
emission$tags = as.factor(emission$tags)
transition$preceder = as.character(transition$preceder )
transition$follower = as.character(transition$follower)
transition$preceder[transition$preceder==""] = "NONE"
transition$follower[transition$follower==""] = "NONE"
transition$preceder = as.factor(transition$preceder )
transition$follower = as.factor(transition$follower)
write.csv(x =transition, "../../transition.csv", row.names = F)
write.csv(x =emission, "../../emission.csv", row.names = F)
write.csv(x= start_tags, "../../start_p.csv", row.names = F)
View(start_p)
write.csv(x= start_p, "../../start_p.csv", row.names = F)
View(start_p)
MLL = data.frame(matrix(ncol = length(sentence), nrow = length(unique(emission$tags))))
sentence = sentences[1]
sentence = unlist(sentence)
training_path = paste0(wd,"/brown_training/")
library(stringr)
list.files(training_path))
list.files(training_path)
files = list.files(training_path)
files = c("ca01","ca02","ca03")
sentences = vector();
idx = 1
for(file in files){
content = readLines(paste0(training_path, file))
print(file)
for(i in 1:length(content)){
s = content[i]
if(nchar(trimws(s))>3){
sentences[idx] = trimws(s);
idx = idx +1
print(idx)
}
}
}
sentences = lapply(sentences, function(x) str_split(x, " ") )
sentence = sentences[1]
sentence = unlist(sentence)
sentence
true_states = sapply(sentence,get_tag )
known_tags = unique(emission$tags)
MLL = data.frame(matrix(ncol = length(sentence), nrow = length(known_tags)))
MLL = data.frame(matrix(nrow = length(sentence), ncol = length(known_tags)))
colnames(MLL) = known_tags
for(state in colnames(MLL)){
MLL[1,state] = start_p$log_p[start_p$start_tags == state]
#emission$log_p[emission$tags ==state & emission$words == true_words[1]]
}
View(start_p)
View(emission)
View(transition)
transition$p = transition$Freq/ transition$total_preceder
transition$log_p = log(transition)
transition$log_p = log(transition$p)
write.csv(x =transition, "../../transition.csv", row.names = F)
transition[transition$preceder = "pr" & transition$follower = "pr]
transition[transition$preceder == "pr" & transition$follower == "pr,]
)
]
''
""
"
transition[transition$preceder == "pr" & transition$follower == "pr",]
transition[transition$preceder == "nil" & transition$follower == "nil",]
transition[transition$preceder == "pn" & transition$follower == "pn",]
emission[emission$tags == "to" & emission$words == "to",]
getwdd()
getwd()
em_short = emission[,c(1,2,5)]
write.csv(em_short.csv, "em_short.csv", row.names = F)
write.csv("em_short.csv",em_short.csv,  row.names = F)
write.csv(x = em_short,"em_short.csv",row.names = F)
write.csv(x = em_short[1:5,],"test_em_short.csv",row.names = F)
em_short$log_p[1]
em_short$log_p[em_short$log_p == -Inf] = 0
write.csv(x = em_short[1:5,],"test_em_short.csv",row.names = F, col.names = F)
write.table(x = em_short[1:5,],"test_em_short.csv",row.names = F, col.names = F)
write.table(x = em_short[1:5,],"test_em_short.csv",row.names = F, col.names = F, sep = ',')
write.table(x = em_short,"em_short.csv",row.names = F, col.names = F, sep = ',')
View(em_short)
write.table(x = em_short[1:5,],"test_em_short.csv",row.names = F, col.names = F, sep = ';')
write.table(x = em_short,"em_short.csv",row.names = F, col.names = F, sep = ';')
write.table(x = em_short[1:5,],"test_em_short.csv",row.names = F, col.names = F, sep = '~')
write.table(x = em_short,"em_short.csv",row.names = F, col.names = F, sep = '~')
emission[emission$tags == "to" & emission$words == "to",]
tail(str_locate_all(str1, "[|]")[[1]], 1)
str1 = "word/word/tag"
tail(str_locate_all(str1, "[|]")[[1]], 1)
tail(str_locate_all(str1, "[/]")[[1]], 1)
tail(str_locate_all(str1, "[/]")[[1]], 1)[1]
idx = tail(str_locate_all(str1, "[/]")[[1]], 1)[1]
tag = str_sub(str1, idx + 1, length(str1))
tag
str1 = "word/word/tag"
idx = tail(str_locate_all(str1, "[/]")[[1]], 1)[1]
tag = str_sub(str1, idx + 1, length(str1))
tag
idx = tail(str_locate_all(str1, "[/]")[[1]], 1)[1]
idx
tag = str_sub(str1, idx + 1, length(str1))
tag = str_sub(str1, idx + 1, -1)
tag
idx = tail(str_locate_all(str1, "[/]")[[1]], 1)[1]
word = str_sub(str1,1, idx -1)
word
get_tag = function(str1){
idx = tail(str_locate_all(str1, "[/]")[[1]], 1)[1]
word = str_sub(str1,1, idx -1)
return(word)
}
sentence = sentences[1]
sentence = unlist(sentence)
sentence
true_states = sapply(sentence,get_tag )
true_words = sapply(sentence,get_word )
get_word = function(str1){
idx = tail(str_locate_all(str1, "[/]")[[1]], 1)[1]
word = str_sub(str1,1, idx -1)
return(word)
}
get_tag = function(str1){
idx = tail(str_locate_all(str1, "[/]")[[1]], 1)[1]
tag = str_sub(str1, idx + 1, -1)
return(tag)
}
true_states = sapply(sentence,get_tag )
true_words = sapply(sentence,get_word )
true_states
known_tags
MLL = data.frame(matrix(ncol = length(sentence), nrow = length(known_tags)))
MLL = data.frame(matrix(nrow = length(sentence), ncol = length(known_tags)))
colnames(MLL) = known_tags
for(state in colnames(MLL)){
MLL[1,state] = start_p$log_p[start_p$start_tags == state]
#emission$log_p[emission$tags ==state & emission$words == true_words[1]]
}
View(transition)
tr_p = transition$log_p[transition$follower == state]
preceder = transition$preceder[transition$follower == state]
preceder
tr_p
preceder
length(MLL[1,])
length(tr_p)
View(MLL)
MLL = data.frame(matrix(nrow = length(sentence), ncol = length(known_tags)))
colnames(MLL) = known_tags
View(MLL)
for(state in colnames(MLL)){
MLL[1,state] = start_p$log_p[start_p$start_tags == state]
#emission$log_p[emission$tags ==state & emission$words == true_words[1]]
}
View(start_p)
start_p$start_tags
all(start_p$start_tags %in% colnames(MLL))
View(MLL)
for(state in colnames(MLL)){
print(state)
MLL[1,state] = start_p$log_p[start_p$start_tags == state]
#emission$log_p[emission$tags ==state & emission$words == true_words[1]]
}
state
for(state in colnames(MLL)){
print(state)
if(state %in% start_p$start_tags){
MLL[1,state] = start_p$log_p[start_p$start_tags == state]
} else {
MLL[1,state]  = -Inf
}
}
for(state in known_tags){
MLL = -Inf
MLL_preceder = "notAstate"
for(preceder in known_tags){
preceder_prob = MLL[pos, preceder]
tr_prob = transition$log_p[transition$preceder == preceder & transition$follower == state]
p = preceder_prob + tr_prob
if(p >= MLL){
MLL = p
MLL_preceder = preceder
}
}
}
pos = 2
for(state in known_tags){
MLL = -Inf
MLL_preceder = "notAstate"
for(preceder in known_tags){
preceder_prob = MLL[pos, preceder]
tr_prob = transition$log_p[transition$preceder == preceder & transition$follower == state]
p = preceder_prob + tr_prob
if(p >= MLL){
MLL = p
MLL_preceder = preceder
}
}
}
MLL[pos, preceder]
MLL[, preceder]
MLL
MLL = data.frame(matrix(nrow = length(sentence), ncol = length(known_tags)))
colnames(MLL) = known_tags
for(state in colnames(MLL)){
print(state)
if(state %in% start_p$start_tags){
MLL[1,state] = start_p$log_p[start_p$start_tags == state]
} else {
MLL[1,state]  = -Inf
}
}
pos = 2
for(state in known_tags){
MLL_val = -Inf
MLL_preceder = "notAstate"
for(preceder in known_tags){
preceder_prob = MLL[pos, preceder]
tr_prob = transition$log_p[transition$preceder == preceder & transition$follower == state]
p = preceder_prob + tr_prob
if(p >= MLL_val){
MLL_val = p
MLL_preceder = preceder
}
}
}
p
transition$log_p[transition$preceder == preceder & transition$follower == state]
preceder_prob
MLL[pos, preceder]
MLL
preceder
pos = 2
for(state in known_tags){
MLL_val = -Inf
MLL_preceder = "notAstate"
for(preceder in known_tags){
preceder_prob = MLL[pos-1, preceder]
tr_prob = transition$log_p[transition$preceder == preceder & transition$follower == state]
p = preceder_prob + tr_prob
if(p >= MLL_val){
MLL_val = p
MLL_preceder = preceder
}
}
}
MLL
MLL_val
length(known_tags)
nrow(transition)
104 * 104
preceder
preceder_probs = MLL[pos-1,]
preceder_probs
preceder_probs = [transition$follower == state]
preceder_probs = transition$log_p[,transition$follower == state]
preceder_probs = transition$log_p[transition$follower == state]
preceder_probs
transition[transition$follower == state,]
preceder_probs = MLL[pos-1,]
tr_probs = transition$log_p[transition$follower == state]
preceder_probs + tr_probs
which.max(preceder_probs + tr_probs)
MLL_prec_mat = data.frame(matrix(nrow = length(sentence), ncol = length(known_tags)))
MLL_prec_mat
for(state in known_tags){
preceder_probs = MLL[pos-1,]
tr_probs = transition$log_p[transition$follower == state]
p = preceder_probs + tr_probs
MLL_preceder= names(preceder_probs)[which.max(p)]
MLL[pos,state] = MLL
MLL_prec_mat[pos,state] = MLL_preceder
}
View(MLL_prec_mat)
colnames(MLL_prec_mat) = known_tags
for(state in known_tags){
preceder_probs = MLL[pos-1,]
tr_probs = transition$log_p[transition$follower == state]
p = preceder_probs + tr_probs
MLL_preceder= names(preceder_probs)[which.max(p)]
MLL[pos,state] = MLL
MLL_prec_mat[pos,state] = MLL_preceder
}
for(state in known_tags){
preceder_probs = MLL[pos-1,]
tr_probs = transition$log_p[transition$follower == state]
p = preceder_probs + tr_probs
MLL_preceder= names(preceder_probs)[which.max(p)]
MLL[pos,state] = p
MLL_prec_mat[pos,state] = MLL_preceder
}
View(MLL_prec_mat)
?for
()
for(pos in 2:length(sentence)){
for(state in known_tags){
preceder_probs = MLL[pos-1,]
tr_probs = transition$log_p[transition$follower == state]
p = preceder_probs + tr_probs
MLL_preceder= names(preceder_probs)[which.max(p)]
MLL[pos,state] = p
MLL_prec_mat[pos,state] = MLL_preceder
}
}
warnings
warnings()
which.max(p)
for(pos in 2:length(sentence)){
for(state in known_tags){
preceder_probs = MLL[pos-1,]
tr_probs = transition$log_p[transition$follower == state]
p = preceder_probs + tr_probs
MLL_preceder= names(which.max(p))
MLL[pos,state] = p
MLL_prec_mat[pos,state] = MLL_preceder
}
}
which.max(c(11,11))
true_states
which.max(MLL[pos])
which.max(MLL[pos,])
final_state = which.max(MLL[pos,])
for(pos in length(sentence):1){
print(final_state)
final_state = MLL_prec_mat[pos,final_state]
}
sentence = sentences[2]
sentence = unlist(sentence)
sentence
true_states = sapply(sentence,get_tag )
true_words = sapply(sentence,get_word )
known_tags = unique(emission$tags)
MLL = data.frame(matrix(nrow = length(sentence), ncol = length(known_tags)))
MLL_prec_mat = data.frame(matrix(nrow = length(sentence), ncol = length(known_tags)))
colnames(MLL) = known_tags
colnames(MLL_prec_mat) = known_tags
for(state in colnames(MLL)){
print(state)
if(state %in% start_p$start_tags){
MLL[1,state] = start_p$log_p[start_p$start_tags == state]
} else {
MLL[1,state]  = -Inf
}
}
tr_p = transition$log_p[transition$follower == state]
length(tr_p)
preceder = transition$preceder[transition$follower == state]
preceder
length(preceder)
MLL_val = -Inf
MLL_preceder = "notAstate"
for(pos in 2:length(sentence)){
for(state in known_tags){
preceder_probs = MLL[pos-1,]
tr_probs = transition$log_p[transition$follower == state]
p = preceder_probs + tr_probs
MLL_preceder= names(which.max(p))
MLL[pos,state] = p
MLL_prec_mat[pos,state] = MLL_preceder
}
}
true_states
final_state = which.max(MLL[pos,])
for(pos in length(sentence):1){
print(final_state)
final_state = MLL_prec_mat[pos,final_state]
}
MLL = data.frame(matrix(nrow = length(sentence), ncol = length(known_tags)))
MLL_prec_mat = data.frame(matrix(nrow = length(sentence), ncol = length(known_tags)))
colnames(MLL) = known_tags
colnames(MLL_prec_mat) = known_tags
for(state in colnames(MLL)){
if(state %in% start_p$start_tags){
p0 = start_p$log_p[start_p$start_tags == state]
p_em = emission[emission$tags == state, emission$words == true_words[0] ]
MLL[1,state] = start_p$log_p[start_p$start_tags == state]
} else {
MLL[1,state]  = -Inf
}
}
MLL = data.frame(matrix(nrow = length(sentence), ncol = length(known_tags)))
MLL_prec_mat = data.frame(matrix(nrow = length(sentence), ncol = length(known_tags)))
colnames(MLL) = known_tags
colnames(MLL_prec_mat) = known_tags
for(state in colnames(MLL)){
if(state %in% start_p$start_tags){
p0 = start_p$log_p[start_p$start_tags == state]
p_em = emission$log_p[emission$tags == state, emission$words == true_words[0] ]
MLL[1,state] = p0 + p_em
} else {
MLL[1,state]  = -Inf
}
}
for(state in colnames(MLL)){
if(state %in% start_p$start_tags){
p0 = start_p$log_p[start_p$start_tags == state]
p_em = emission$log_p[emission$tags == state& emission$words == true_words[0] ]
MLL[1,state] = p0 + p_em
} else {
MLL[1,state]  = -Inf
}
}
